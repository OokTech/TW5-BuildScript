#!/bin/bash

#This script takes every plugin by a single author and creates demo wikis
#for each one. It rebuilds wikis and plugins only if there have been updates
#and it checks to see if the wiki needs to be uploaded after being built.
#It also checks and if a plugin has been updated it will increment the plugin
#version number if there have been changes
#If the wikis need to be uploaded (that is they are newer than the previously
#uploaded version) and the wiki has been tested, then it uploads the files.
#The script also uploads a new version of a plugin library that contains all the
#plugins built by the script, and it generates a directory wiki that lists the
#wikis created by the script along with their current version number.

#This script assumes that you have the proper ssh keys in place so you don't
#have to give a password when you log into your server.

#To use this script:
# Each edition you want built using this script needs to have the same name as
#  the plugin being demoed. The folder should have names in the form
#  ./editions/$author/PluginName/
#   Example: ./editions/OokTech/Contacts/
# Each plugin that corresponds to an edition is in folders with names in the
#  form: ./plugins/$author/$pluginprefixPluginName/
#  Example: ./plugins/OokTech/TW5-Contacts/
# After running the script a file called ./TestingState.json will be created.
#  This file will list each edition as the keys in a json file and the value will
#  be "testing". As long as this value is testing the edition won't be uploaded.
#  So you need to edit the json file and manually change this to something other
#  than testing then the edition will be uploaded. This is to ensure that you
#  actually test the editions before putting them online.
# Then set the parameters below, you need to set (see examples below):
# author - the author of the plugins, used to find the plugin and edition file paths
# pluginprefix - A prefix on the plugin folders, can be set to "" if you don't use one
# upload - set this to false if you don't want the script to upload your files
#           if this is false than the rest of the settings don't do anything
# user - The user for signing into your server for hosting the wiki files
# server - the server you have your files hosted on
# serverfilepath - The path to where your files are hosted on your server
# baseurl - the base url where your files are hosted.


#The $author needs to match the plugin and edition folders
author=OokTech
#This is a prefix on the plugin folder names, if you don't have one just put ""
pluginprefix=TW5-

#if you set this to false than nothing will be uploaded and you can ignore
#the rest of the configuration.
upload=true

#As an example, your ssh commands would be something like this to get to
#the folder where your wiki is hosted:

#ssh user@server
#cd serverfilepath

#the scp command used is:
#scp $outfile $user@$server:$serverfilepath/$plugin/

#When you ssh into your server, this is the username you use there
user=jcarty
#When you ssh into your server, this is the server name you use
server=ooktech.com
#This is the folder on your server where you have your wiki subfolders.
#The wikis will be in $serverfilepath/$plugin,
# Example: /home/jcarty/ooktech.com/TiddlyWiki/Contacts
serverfilepath=/home/jcarty/ooktech.com/TiddlyWiki
#When your wiki is online the url you use to get to it should be
# $baseurl/$plugin
# Example: https://ooktech.com/TiddlyWiki/Contacts
# So the baseurl would be set to https://ooktech.com/TiddlyWiki
baseurl=https://ooktech.com/TiddlyWiki

#
# YOU SHOULDN'T NEED TO EDIT ANYTHING BELOW THIS LINE
#

#This makes the tiddler used by the directory generated by the script.
#$1 is the $plugin name and $2 is the $pluginfolder
maketwcard () {
    plugintiddler="$(cat $2/plugin.info | jq '.title')"
    version="$(cat $2/plugin.info | jq '.version')"
    maintainer="$(cat $2/plugin.info | jq '.author')"
    description="$(cat $2/plugin.info | jq '.description')"
    repo="$(cat $2/plugin.info | jq '.source')"
    CardName="$1 ($(sed -e 's/^"//' -e 's/"$//' <<<"$maintainer"))"
    echo title: $(sed -e 's/^"//' -e 's/"$//' <<<"$CardName") > "./editions/$author/ZZZDirectory/tiddlers/$CardName.tid"
    echo caption: $1 >> "./editions/$author/ZZZDirectory/tiddlers/$CardName.tid"
    echo plugin_tidder: $(sed -e 's/^"//' -e 's/"$//' <<<"$plugintiddler") >> "./editions/$author/ZZZDirectory/tiddlers/$CardName.tid"
    echo revision: $(sed -e 's/^"//' -e 's/"$//' <<<"$version") >> "./editions/$author/ZZZDirectory/tiddlers/$CardName.tid"
    echo description: $(sed -e 's/^"//' -e 's/"$//' <<<"$description") >> "./editions/$author/ZZZDirectory/tiddlers/$CardName.tid"
    echo repo: $(sed -e 's/^"//' -e 's/"$//' <<<"$repo") >> "./editions/$author/ZZZDirectory/tiddlers/$CardName.tid"
    echo url: $baseurl/$1 >> "./editions/$author/ZZZDirectory/tiddlers/$CardName.tid"
    echo name_plate_type: TiddlyWiki >> "./editions/$author/ZZZDirectory/tiddlers/$CardName.tid"
    echo "tags: [[<Name Plate>]] Website OokTech" >> "./editions/$author/ZZZDirectory/tiddlers/$CardName.tid"
}

#This is the function that dues the actual building part, $1 in the $plugin name
#and $2 is the $pluginfolder $3 is true if the plugin version needs to be incremented, false otherwise
buildwiki () {
    echo build $1 edition
    #if the plugin needs to be updated, increment the version number
    if [ "$3" = "true" ]; then
        #Update the version number in plugin.info (awk is magic)
        plugininfo="$(awk -F'["]' -v OFS='"'  '/"version":/{split($4,a,".");$4=a[1]"."a[2]"."a[3]+1};1' $2/plugin.info)"
        echo "$plugininfo" > $2/plugin.info
        #update or create the twCard for the plugin
        maketwcard $1 $2
    fi
    #build the wiki, the Directory edition is special
    if [ "$1" = "Directory" ]; then
        node ./tiddlywiki.js editions/$author/ZZZ$1 --build index
    else
        node ./tiddlywiki.js editions/$author/$1 --build index
    fi
}

#initialise the TestingState.json file
echo "{" > ./TestingState_temp.json
#initialise the UploadTimes.json file
echo "{" > ./UploadTimes_temp.json
#initialise the variable that tracks if the plugin library needs to be updated
updatepluginlibrary=false
#List all editions in the ./editions/$author/ folder
for f in ./editions/$author/*; do
    #initialise the TestingState
    testingstate=\"testing\"
    #get the edition name by removing the ./editions/$author/ prefix
    #There is Magic handling so that the directory gets built last but doesn't
    #break other things.
    if [ $f = "./editions/$author/ZZZDirectory" ]; then
        plugin=${f#*./editions/$author/ZZZ}
    else
        plugin=${f#*./editions/$author/}
    fi
    #initialise alreadybuilt variable
    alreadybuilt=false
    #get the output file name
    file="$f/output/index.html"
    #get the tiddlers folder
    tiddlersfolder=$f/tiddlers
    #get the plugin folder by combining the parts of the folder name
    pluginfolder=./plugins/$author/$pluginprefix$plugin
    maketwcard $plugin $pluginfolder
    #check to see if the output file exists
    if [ -e $file ]; then
        #if the output file exists, check if we should rebuld it
        for pluginfile in $pluginfolder/*; do
            #check each file in the plugin folder
            if [ "$file" -ot "$pluginfile" ]; then
                #if any of the plugin files are newer than the output, rebuild
                #and increment the plugin version number
                buildwiki $plugin $pluginfolder true
                updatepluginlibrary=true
                #Special handling or the Directory is never going to be out of
                #testing because it gets updated each time.
                if [ "$plugin" != "Directory" ]; then
                    alreadybuilt=true
                fi
                #if we build than we don't need to keep testing this plugin,
                #so break
                break
            fi
        done
        if [ "$alreadybuilt" = "false" ]; then
            if [ "$file" -ot "$f/tiddlywiki.info" ]; then
                #if the tiddlywiki.info file changed, rebuild
                #without incrementing the plugin version number
                buildwiki $plugin $pluginfolder false
                alreadybuilt=true
            else
                for tiddlerfile in $tiddlersfolder/*; do
                    #check each file in the tiddlers folder
                    if [ "$file" -ot "$tiddlerfile" ]; then
                            #if any of the tiddlers are older than the output, rebuild
                            #without incrementing the plugin version number
                            buildwiki $plugin $pluginfolder false
                            alreadybuilt=true
                            #once we build we don't need to continue checking
                            break
                    fi
                done
            fi
        fi
    else
        #if the output file doesn't exist, build it
        buildwiki $plugin $pluginfolder false
        alreadybuilt=true
    fi
    if [ "$alreadybuilt" = "true" ]; then
        #if the wiki has been built during this run it must be tested
        echo \"$plugin\": \"testing\", >> ./TestingState_temp.json
    else
        #if the wiki wasn't built this time than the testing state remains the same
        testingstate=$(cat ./TestingState.json | jq .$plugin)
        if [ -z $testingstate ]; then
            #if $testingstate is empty set it to testing to be safe.
            testingstate=\"testing\"
        fi
        echo \"$plugin\": $testingstate, >> ./TestingState_temp.json
    fi

    #if the wiki wasn't built during this run check to see if we need to
    #upload it and if the testingstate is 'ready', if so upload it.
    if [ "$alreadybuilt" = "false" -a "$upload" = "true" -a "$testingstate" = "\"ready\"" ]; then
        #get the previous upload time
        uploadtime=$(cat ./UploadTimes.json | jq .$plugin)
        #get the path and name for the file we want to upload
        outfile=$f/output/index.html
        #get the files timestamp
        timestamp=$(stat -c %Y $outfile)
        if [ -z $uploadtime -o "$uploadtime" = "null" ]; then
            uploadtime=0
        fi
        if [ $timestamp -gt $uploadtime ]; then
            #if the html file is newer than the previous upload time,
            #upload the new file
            echo "Upload $plugin edition"
            scp $outfile $user@$server:$serverfilepath/$plugin/
            #Set the last upload time as the current time in ms since epoch
            currenttime=$(date '+%s')
            echo \"$plugin\": $currenttime, >> ./UploadTimes_temp.json
        else
            #get the old time if it isn't time to upload now
            oldtime=$(cat ./UploadTimes.json | jq .$plugin)
            #put the previously used upload time instead
            echo \"$plugin\": $oldtime, >> ./UploadTimes_temp.json
        fi
    else
        #get the old time if it isn't time to upload now
        oldtime=$(cat ./UploadTimes.json | jq .$plugin)
        #put the previously used upload time instead
        echo \"$plugin\": $oldtime, >> ./UploadTimes_temp.json
    fi
done

#check if we need to update the plugin library, and update stable or unstable
#as appropriate.
if [ "$upload" = "true" ]; then
    if [ "$updatepluginlibrary" = "true" ]; then
        #After all the editions are built and any plugins that need it are rebuilt
        #rebuild the plugin library
        echo "Rebuilding Plugin Libary for Unstable"
        node ./tiddlywiki.js editions/pluginlibrary --build
        #Now upload to the unstable plugin library but not the stable one
        echo "Upload plugin libarry to Unstable"
        scp ./editions/pluginlibrary/output/index.html $user@$server:$serverfilepath/UnstablePluginLibrary/
        scp -pr ./editions/pluginlibrary/output/recipes $user@$server:$serverfilepath/UnstablePluginLibrary/
        #Set the last upload time as the current time in ms since epoch
        oldtime=$(cat ./UploadTimes.json | jq .StableLibrary)
        echo \"StableLibrary\": $oldtime >> ./UploadTimes_temp.json
        echo \"PluginLibrary\": \"unstable\" >> ./TestingState_temp.json
    else
        #if there are not changes to the library, check if all of the editions are
        #out of testing and if there have been updates since the last upload
        #If so than we update to stable and unstable with the newest things
        echo "Rebuilding Plugin Libary for Stable"
        node ./tiddlywiki.js editions/pluginlibrary --build
        #Now upload to the stable plugin library
        echo "Upload plugin libarry to Stable"
        scp ./editions/pluginlibrary/output/index.html $user@$server:$serverfilepath/PluginLibrary/
        scp -pr ./editions/pluginlibrary/output/recipes $user@$server:$serverfilepath/PluginLibrary/
        #Upload to the unstable plugin library so that it has the newest stuff also
        echo "Upload plugin libarry to Unstable"
        scp ./editions/pluginlibrary/output/index.html $user@$server:$serverfilepath/UnstablePluginLibrary/
        scp -pr ./editions/pluginlibrary/output/recipes $user@$server:$serverfilepath/UnstablePluginLibrary/
        #Set the last upload time as the current time in ms since epoch
        currenttime=$(date '+%s')
        echo \"StableLibrary\": $currenttime >> ./UploadTimes_temp.json
        echo \"PluginLibrary\": \"stable\" >> ./TestingState_temp.json

        #also update the directory if we make it here, the directory goes to the
        #serverfilepath, not in a subfolder
        echo "Upload main Directory Listing"
        scp ./editions/$author/ZZZDirectory/output/index.html $user@$server:$serverfilepath/
    fi
else
    oldtime=$(cat ./UploadTimes.json | jq .StableLibrary)
    echo \"StableLibrary\": $oldtime >> ./UploadTimes_temp.json
    echo \"PluginLibrary\": \"unstable\" >> ./TestingState_temp.json
fi

#finish the TestingState.json file
echo "}" >> ./TestingState_temp.json
#finish the UploadTimes.json file
echo "}" >> ./UploadTimes_temp.json

#copy temp file to persistent file
cp ./UploadTimes_temp.json ./UploadTimes.json
#copy the temp files to the persistent files for the next time the script runs
cp ./TestingState_temp.json ./TestingState.json
